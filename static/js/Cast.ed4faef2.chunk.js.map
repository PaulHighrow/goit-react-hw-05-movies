{"version":3,"file":"static/js/Cast.ed4faef2.chunk.js","mappings":"sTAEaA,EAAWC,EAAAA,GAAAA,GAAH,kGAMRC,EAAUD,EAAAA,GAAAA,IAAH,wCAIPE,EAAWF,EAAAA,GAAAA,EAAH,qIASRG,EAAgBH,EAAAA,GAAAA,KAAH,sF,6BCqC1B,EAhDa,WACX,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAmBR,OAjBAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IAAMI,EAAS,mCAAG,8GAEUC,EAAAA,EAAAA,IAAaJ,GAFvB,OAERK,EAFQ,OAGdR,EAAQQ,GAHM,gDAKdC,QAAQC,MAAR,MACAC,EAAAA,GAAAA,MAAA,uBAA4B,KAAMC,QAAlC,wBANc,yBAQdV,GAAa,GARC,4EAAH,qDAYfI,GACD,GAAE,CAACH,KAGF,iCACE,SAAC,IAAD,CAASU,GAAG,KAAZ,kBACCZ,GACC,SAACa,EAAA,EAAD,KAEA,SAACrB,EAAD,UACGM,EAAKgB,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,aAAcC,EAAxB,EAAwBA,KAAMC,EAA9B,EAA8BA,UAA9B,OACR,2BACE,SAACxB,EAAD,CACEyB,IAAKH,EAAeI,EAAAA,EAAeJ,EAAeK,EAClDC,IAAKL,KAEP,UAACtB,EAAD,WACGsB,EACAC,IAAa,UAACtB,EAAD,iBAAmBsB,UAP5BH,EADD,OAcd,SAAC,KAAD,MAGL,C,gFCtDYQ,E,QAAU9B,GAAAA,IAAH,sE,SCCPoB,EAAS,WACpB,OACE,SAACU,EAAD,WACE,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,OAAO,IACPC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTC,UAAU,gBACVC,MAAO,CAAEC,QAAS,YAIzB,C,mMCjBDC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAU,mCACVC,EAAiB,mCAAG,oGACZF,EAAAA,EAAAA,IAAA,uBAAkC,CACnDG,OAAQ,CACNC,QAASH,EACTI,KAAM,KAJqB,cACzBC,EADyB,yBAOxBA,EAAKC,KAAKC,SAPc,2CAAH,qDAUjBC,EAAgB,mCAAG,WAAMC,GAAN,uFACXV,EAAAA,EAAAA,IAAA,8CACsBU,EADtB,+BAEjB,CACEP,OAAQ,CACNC,QAASH,EACTI,KAAM,KANkB,cACxBC,EADwB,yBAUvBA,EAAKC,KAAKC,SAVa,2CAAH,sDAahBG,EAAe,mCAAG,WAAM3C,GAAN,uFACVgC,EAAAA,EAAAA,IAAA,gBAAmBhC,EAAnB,oBAAyC,CAC1DmC,OAAQ,CACNC,QAASH,KAHgB,cACvBK,EADuB,yBAMtBA,EAAKC,MANiB,2CAAH,sDASfnC,EAAY,mCAAG,WAAMJ,GAAN,uFACPgC,EAAAA,EAAAA,IAAA,gBAAmBhC,EAAnB,4BAAiD,CAClEmC,OAAQ,CACNC,QAASH,KAHa,cACpBK,EADoB,yBAMnBA,EAAKC,KAAK3C,MANS,2CAAH,sDASZgD,EAAe,mCAAG,WAAM5C,GAAN,uFACVgC,EAAAA,EAAAA,IAAA,gBAAmBhC,EAAnB,4BAAiD,CAClEmC,OAAQ,CACNC,QAASH,KAHgB,cACvBK,EADuB,yBAMtBA,EAAKC,KAAKC,SANY,2CAAH,qD,uDC9CrB,IAAMtB,EAAe,iC","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","services/apiService.js","services/constants.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n  gap: 10px;\n`;\n\nexport const CastPic = styled.img`\n  width: 100%;\n`;\n\nexport const CastName = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 1.2;\n\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const CastCharacter = styled.span`\n  font-size: 18px;\n  font-weight: 400;\n  line-height: 1.2;\n`;\n","import { Heading } from 'components/App.styled';\nimport { Loader } from 'components/Loader/Loader';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services/apiService';\nimport { BASE_IMG_URL } from 'services/constants';\nimport { CastList, CastPic, CastName, CastCharacter } from './Cast.styled';\nimport placeholder from '../../img/placeholder.jpg';\nimport toast, { Toaster } from 'react-hot-toast';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { id } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchCast = async () => {\n      try {\n        const movieCast = await getMovieCast(id);\n        setCast(movieCast);\n      } catch (error) {\n        console.error(error);\n        toast.error(`Oh boy, it's ${error.message}! Please try again!`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCast();\n  }, [id]);\n\n  return (\n    <>\n      <Heading as=\"h2\">Cast</Heading>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <CastList>\n          {cast.map(({ order, profile_path, name, character }) => (\n            <li key={order}>\n              <CastPic\n                src={profile_path ? BASE_IMG_URL + profile_path : placeholder}\n                alt={name}\n              />\n              <CastName>\n                {name}\n                {character && <CastCharacter>as {character}</CastCharacter>}\n              </CastName>\n            </li>\n          ))}\n        </CastList>\n      )}\n      <Toaster />\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import { Rings } from 'react-loader-spinner';\nimport { Wrapper } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <Wrapper>\n      <Rings\n        height=\"80\"\n        width=\"80\"\n        color=\"#4fa94d\"\n        radius=\"6\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n        ariaLabel=\"rings-loading\"\n        style={{ display: 'block' }}\n      />\n    </Wrapper>\n  );\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const API_KEY = 'e146a7a5146c0f8a3c3cd99167c5b659';\nexport const getTrendingMovies = async () => {\n  const resp = await axios.get(`/trending/movie/day?`, {\n    params: {\n      api_key: API_KEY,\n      page: 1,\n    },\n  });\n  return resp.data.results;\n};\n\nexport const getMoviesByQuery = async query => {\n  const resp = await axios.get(\n    `/search/movie?&language=en-US&query=${query}&page=1&include_adult=false`,\n    {\n      params: {\n        api_key: API_KEY,\n        page: 1,\n      },\n    }\n  );\n  return resp.data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const resp = await axios.get(`movie/${id}?&language=en-US`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return resp.data;\n};\n\nexport const getMovieCast = async id => {\n  const resp = await axios.get(`movie/${id}/credits?&language=en-US`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return resp.data.cast;\n};\n\nexport const getMovieReviews = async id => {\n  const resp = await axios.get(`movie/${id}/reviews?&language=en-US`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return resp.data.results;\n};\n","export const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w400';\nexport const BACK_IMG_URL = 'https://image.tmdb.org/t/p/w1280';\n"],"names":["CastList","styled","CastPic","CastName","CastCharacter","useState","cast","setCast","isLoading","setIsLoading","id","useParams","useEffect","fetchCast","getMovieCast","movieCast","console","error","toast","message","as","Loader","map","order","profile_path","name","character","src","BASE_IMG_URL","placeholder","alt","Wrapper","height","width","color","radius","wrapperStyle","wrapperClass","visible","ariaLabel","style","display","axios","API_KEY","getTrendingMovies","params","api_key","page","resp","data","results","getMoviesByQuery","query","getMovieDetails","getMovieReviews"],"sourceRoot":""}