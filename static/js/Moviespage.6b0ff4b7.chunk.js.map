{"version":3,"file":"static/js/Moviespage.6b0ff4b7.chunk.js","mappings":"oMAGaA,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,yBACE,SAAC,KAAD,CAASC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAA7C,SACGI,KAFID,EADC,KASjB,C,qICfYK,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,OAAO,IACPC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTC,UAAU,iBAGf,ECmCD,EA5Ce,WACb,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOlB,EAAP,KAAeqB,EAAf,KACA,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAcH,EAAaI,IAAI,SAChCD,IAILE,EAAAA,EAAAA,IAAiBF,GACdG,KAAKV,GACLW,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,EAAlB,IACXE,SAAQ,WACPZ,GAAa,GACbH,EAASQ,EACV,GACJ,GAAE,CAACH,IAYJ,OACE,gCACGH,IAAa,SAACb,EAAD,KACd,oCACA,kBAAM2B,SAdW,SAAAC,GACnBA,EAAIC,iBACJf,GAAa,GACbG,EAAgB,CAAEP,MAAAA,GACnB,EAUG,WACE,kBAAOoB,KAAK,OAAOC,KAAK,QAAQC,MAAOtB,EAAOuB,SAT/B,SAAAL,GACnBjB,EAASiB,EAAIM,OAAOF,MACrB,KAQK,mBAAQF,KAAK,SAAb,wBAEF,SAACxC,EAAA,EAAD,CAAYC,OAAQA,MAGzB,C,uKC9CD4C,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAU,mCACVC,EAAiB,mCAAG,oGACZF,EAAAA,EAAAA,IAAA,uBAAkC,CACnDG,OAAQ,CACNC,QAASH,EACTI,KAAM,KAJqB,cACzBC,EADyB,yBAOxBA,EAAKC,KAAKC,SAPc,2CAAH,qDAUjBtB,EAAgB,mCAAG,WAAMX,GAAN,uFACXyB,EAAAA,EAAAA,IAAA,8CACsBzB,EADtB,+BAEjB,CACE4B,OAAQ,CACNC,QAASH,EACTI,KAAM,KANkB,cACxBC,EADwB,yBAUvBA,EAAKC,KAAKC,SAVa,2CAAH,sDAahBC,EAAe,mCAAG,WAAMjD,GAAN,uFACVwC,EAAAA,EAAAA,IAAA,gBAAmBxC,EAAnB,oBAAyC,CAC1D2C,OAAQ,CACNC,QAASH,KAHgB,cACvBK,EADuB,yBAMtBA,EAAKC,MANiB,2CAAH,sDASfG,EAAY,mCAAG,WAAMlD,GAAN,uFACPwC,EAAAA,EAAAA,IAAA,gBAAmBxC,EAAnB,4BAAiD,CAClE2C,OAAQ,CACNC,QAASH,KAHa,cACpBK,EADoB,yBAMnBA,EAAKC,KAAKI,MANS,2CAAH,qD","sources":["components/MoviesList/MoviesList.jsx","components/Loader/Loader.jsx","pages/Movies/Movies.jsx","services/apiService.js"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <NavLink to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n          </NavLink>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { Rings } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <Rings\n      height=\"80\"\n      width=\"80\"\n      color=\"#4fa94d\"\n      radius=\"6\"\n      wrapperStyle={{}}\n      wrapperClass=\"\"\n      visible={true}\n      ariaLabel=\"rings-loading\"\n    />\n  );\n};\n","import { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMoviesByQuery } from 'services/apiService';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const searchQuery = searchParams.get('query');\n    if (!searchQuery) {\n      return;\n    }\n\n    getMoviesByQuery(searchQuery)\n      .then(setMovies)\n      .catch(error => console.error(error))\n      .finally(() => {\n        setIsLoading(false);\n        setQuery(searchQuery);\n      });\n  }, [searchParams]);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    setIsLoading(true);\n    setSearchParams({ query });\n  };\n\n  const handleChange = evt => {\n    setQuery(evt.target.value);\n  };\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <h1>Movies</h1>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"query\" value={query} onChange={handleChange} />\n        <button type=\"submit\">Search</button>\n      </form>\n      <MoviesList movies={movies} />\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const API_KEY = 'e146a7a5146c0f8a3c3cd99167c5b659';\nexport const getTrendingMovies = async () => {\n  const resp = await axios.get(`/trending/movie/day?`, {\n    params: {\n      api_key: API_KEY,\n      page: 1,\n    },\n  });\n  return resp.data.results;\n};\n\nexport const getMoviesByQuery = async query => {\n  const resp = await axios.get(\n    `/search/movie?&language=en-US&query=${query}&page=1&include_adult=false`,\n    {\n      params: {\n        api_key: API_KEY,\n        page: 1,\n      },\n    }\n  );\n  return resp.data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const resp = await axios.get(`movie/${id}?&language=en-US`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return resp.data;\n};\n\nexport const getMovieCast = async id => {\n  const resp = await axios.get(`movie/${id}/credits?&language=en-US`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return resp.data.cast;\n};\n"],"names":["MoviesList","movies","location","useLocation","map","id","title","to","state","from","Loader","height","width","color","radius","wrapperStyle","wrapperClass","visible","ariaLabel","useState","query","setQuery","setMovies","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","useEffect","searchQuery","get","getMoviesByQuery","then","catch","error","console","finally","onSubmit","evt","preventDefault","type","name","value","onChange","target","axios","API_KEY","getTrendingMovies","params","api_key","page","resp","data","results","getMovieDetails","getMovieCast","cast"],"sourceRoot":""}